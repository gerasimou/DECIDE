// Type 2 room CTMC model
// ------------------------------------------------------------

ctmc 

// Model parameters
//const double t;
//const double l1i; const double l2i; const double l3i; const double l3ip;
//const double p2req; const double p2retry; 
//const double p3poss; const double p3ibasic; const double p3ifull; 
//const double c1i; const double c2i; const double c3i; const double c3ip;
//const double u3; const double u3p;


const double rt2p3ibasic = 1 - rt2p3ifull; 

// State constants
const T1=0; const T2=1; const T3=2; const T3P=3; const END=4;

label "end" = s=END;

module room
  s:[T1..END] init T1;

  [T1done] (s=T1) -> rt2l1i*(1-rt2p2req)*(1-rt2p3poss): (s'=END) +
                     rt2l1i*(1-rt2p2req)*rt2p3poss*rt2p3ifull: (s'=T3) +
                     rt2l1i*rt2p2req: (s'=T2) +
                     rt2l1i*(1-rt2p2req)*rt2p3poss*rt2p3ibasic: (s'=T3P);

  [T2done] (s=T2) -> rt2l2i*(1-rt2p2retry)*rt2p3poss*rt2p3ifull: (s'=T3) +
                     rt2l2i*(1-rt2p2retry)*(1-rt2p3poss): (s'=END) +
                     rt2l2i*(1-rt2p2retry)*rt2p3poss*rt2p3ibasic: (s'=T3P) +
                     rt2l2i*rt2p2retry: (s'=T2);  

  [T3done] (s=T3) -> rt2l3i: (s'=END);

  [T3Pdone] (s=T3P) -> rt2l3ip: (s'=END);
endmodule

// Cost reward
rewards "c"
  [T1done] true: rt2c1i;
  [T2done] true: rt2c2i;
  [T3done] true: rt2c3i;
  [T3Pdone] true: rt2c3ip;
endrewards

// Utility reward
rewards "u"
  [T3done] true: rt2u3;
  [T3Pdone] true: rt2u3p;
endrewards

// Time reward
rewards "t"
   true: 1;
endrewards


//const double rt2p3ifull;
