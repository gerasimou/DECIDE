// Type 2 room CTMC model
// ------------------------------------------------------------

ctmc 

// Model parameters
//Rates for executing tasks
const double l1i; 	//Task 1
const double l2i; 	//Task 2
const double l3i; 	//Task 3 full
const double l3ip;	//Task 3 basic

const double p2req; 	//Task 2 required probability
const double p2retry; 	//Task 2 retry probabiltiy 
//const double p2rrwetry; //not needed

const double p3poss; const double p3ibasic; const double p3ifull; 
const double p3iskip = (1-p3poss) + p3poss*(1-p3ibasic-p3ifull);

const double c1i; const double c2i; const double c3i; const double c3ip;

// State constants
const T1=0; const T2=1; const T3=2; const T3P=3; const END=4;

label "end" = s=END;

module room
  s:[T1..END] init T1;

  [T1done] (s=T1) -> l1i*(1-p2req)*p3iskip: (s'=END) +
                     l1i*(1-p2req)*p3poss*p3ifull: (s'=T3) +
                     l1i*p2req: (s'=T2) +
                     l1i*(1-p2req)*p3poss*p3ibasic: (s'=T3P);

  [T2done] (s=T2) -> l2i*(1-p2retry)*p3poss*p3ifull: (s'=T3) +
                     l2i*(1-p2retry)*p3iskip: (s'=END) +
                     l2i*(1-p2retry)*p3poss*p3ibasic: (s'=T3P) +
                     l2i*p2retry: (s'=T2);  

  [T3done] (s=T3) -> l3i: (s'=END);

  [T3Pdone] (s=T3P) -> l3ip: (s'=END);
endmodule

// Cost reward
rewards "c"
  [T1done] true: c1i;
  [T2done] true: c2i;
  [T3done] true: c3i;
  [T3Pdone] true: c3ip;
endrewards

// Time reward
rewards "t"
   true: 1;
endrewards