// Rooms joint CTMC model template
// ------------------------------------------------------------

ctmc 


// Model parameters

const mf =100; // Used for calculation of state values in rooms
const GO=0; // Initial state

// Are we there yet?
label "end" = s=r8END;

// Rooms Type 1 -----------

// Begin Room Constants ---

const r1T1=1*mf+0; const r1T2=1*mf+1; const r1T2P=1*mf+2; const r1END=1*mf+3;
const r2T1=2*mf+0; const r2T2=2*mf+1; const r2T2P=2*mf+2; const r2END=2*mf+3;
const r3T1=3*mf+0; const r3T2=3*mf+1; const r3T2P=3*mf+2; const r3END=3*mf+3;

// End Room Constants ----


// Rooms Type 2 -----------

// Begin Room Constants ---

const r4T1=4*mf+0; const r4T2=4*mf+1; const r4T3=4*mf+2; const r4T3P=4*mf+3; const r4END=4*mf+4;
const r5T1=5*mf+0; const r5T2=5*mf+1; const r5T3=5*mf+2; const r5T3P=5*mf+3; const r5END=5*mf+4;
const r6T1=6*mf+0; const r6T2=6*mf+1; const r6T3=6*mf+2; const r6T3P=6*mf+3; const r6END=6*mf+4;
const r7T1=7*mf+0; const r7T2=7*mf+1; const r7T3=7*mf+2; const r7T3P=7*mf+3; const r7END=7*mf+4;
const r8T1=8*mf+0; const r8T2=8*mf+1; const r8T3=8*mf+2; const r8T3P=8*mf+3; const r8END=8*mf+4;

// End Room Constants ----

module rooms
  s:[GO..r8END] init GO;

// Travel
 [travel] (s=GO) -> v_i/d_i: (s'=r1T1);

// Rooms Type 1

  [r1T1done] (s=r1T1) -> rt1l1i*rt1p2norm: (s'=r1T2) + rt1l1i*(1-rt1p2norm): (s'=r1T2P);
  [r1T2done] (s=r1T2) -> rt1l2i*rt1p2retry: (s'=r1T2) + rt1l2i*(1-rt1p2retry): (s'=r2T1);
  [r1T2done] (s=r1T2P) -> rt1l2ip*rt1p2retry: (s'=r1T2P) + rt1l2ip*(1-rt1p2retry): (s'=r2T1);
  [r2T1done] (s=r2T1) -> rt1l1i*rt1p2norm: (s'=r2T2) + rt1l1i*(1-rt1p2norm): (s'=r2T2P);
  [r2T2done] (s=r2T2) -> rt1l2i*rt1p2retry: (s'=r2T2) + rt1l2i*(1-rt1p2retry): (s'=r3T1);
  [r2T2done] (s=r2T2P) -> rt1l2ip*rt1p2retry: (s'=r2T2P) + rt1l2ip*(1-rt1p2retry): (s'=r3T1);
  [r3T1done] (s=r3T1) -> rt1l1i*rt1p2norm: (s'=r3T2) + rt1l1i*(1-rt1p2norm): (s'=r3T2P);
  [r3T2done] (s=r3T2) -> rt1l2i*rt1p2retry: (s'=r3T2) + rt1l2i*(1-rt1p2retry): (s'=r4T1);
  [r3T2done] (s=r3T2P) -> rt1l2ip*rt1p2retry: (s'=r3T2P) + rt1l2ip*(1-rt1p2retry): (s'=r4T1);

// Rooms Type 2

[r4T1done] (s=r4T1) -> rt2l1i*(1-rt2p2req)*(1-rt2p3poss): (s'=r5T1) +
                     rt2l1i*(1-rt2p2req)*rt2p3poss*rt2p3ifull: (s'=r4T3) +
                     rt2l1i*rt2p2req: (s'=r4T2) +
                     rt2l1i*(1-rt2p2req)*rt2p3poss*rt2p3ibasic: (s'=r4T3P);

[r4T2done] (s=r4T2) -> rt2l2i*(1-rt2p2retry)*rt2p3poss*rt2p3ifull: (s'=r4T3) +
                     rt2l2i*(1-rt2p2retry)*(1-rt2p3poss): (s'=r5T1) +
                     rt2l2i*(1-rt2p2retry)*rt2p3poss*(1-rt2p3ifull): (s'=r4T3P) +
                     rt2l2i*rt2p2retry: (s'=r4T2);  

[r4T3done] (s=r4T3) -> rt2l3i: (s'=r5T1);

[r4T3Pdone] (s=r4T3P) -> rt2l3ip: (s'=r5T1);
[r5T1done] (s=r5T1) -> rt2l1i*(1-rt2p2req)*(1-rt2p3poss): (s'=r6T1) +
                     rt2l1i*(1-rt2p2req)*rt2p3poss*rt2p3ifull: (s'=r5T3) +
                     rt2l1i*rt2p2req: (s'=r5T2) +
                     rt2l1i*(1-rt2p2req)*rt2p3poss*rt2p3ibasic: (s'=r5T3P);

[r5T2done] (s=r5T2) -> rt2l2i*(1-rt2p2retry)*rt2p3poss*rt2p3ifull: (s'=r5T3) +
                     rt2l2i*(1-rt2p2retry)*(1-rt2p3poss): (s'=r6T1) +
                     rt2l2i*(1-rt2p2retry)*rt2p3poss*(1-rt2p3ifull): (s'=r5T3P) +
                     rt2l2i*rt2p2retry: (s'=r5T2);  

[r5T3done] (s=r5T3) -> rt2l3i: (s'=r6T1);

[r5T3Pdone] (s=r5T3P) -> rt2l3ip: (s'=r6T1);
[r6T1done] (s=r6T1) -> rt2l1i*(1-rt2p2req)*(1-rt2p3poss): (s'=r7T1) +
                     rt2l1i*(1-rt2p2req)*rt2p3poss*rt2p3ifull: (s'=r6T3) +
                     rt2l1i*rt2p2req: (s'=r6T2) +
                     rt2l1i*(1-rt2p2req)*rt2p3poss*rt2p3ibasic: (s'=r6T3P);

[r6T2done] (s=r6T2) -> rt2l2i*(1-rt2p2retry)*rt2p3poss*rt2p3ifull: (s'=r6T3) +
                     rt2l2i*(1-rt2p2retry)*(1-rt2p3poss): (s'=r7T1) +
                     rt2l2i*(1-rt2p2retry)*rt2p3poss*(1-rt2p3ifull): (s'=r6T3P) +
                     rt2l2i*rt2p2retry: (s'=r6T2);  

[r6T3done] (s=r6T3) -> rt2l3i: (s'=r7T1);

[r6T3Pdone] (s=r6T3P) -> rt2l3ip: (s'=r7T1);
[r7T1done] (s=r7T1) -> rt2l1i*(1-rt2p2req)*(1-rt2p3poss): (s'=r8T1) +
                     rt2l1i*(1-rt2p2req)*rt2p3poss*rt2p3ifull: (s'=r7T3) +
                     rt2l1i*rt2p2req: (s'=r7T2) +
                     rt2l1i*(1-rt2p2req)*rt2p3poss*rt2p3ibasic: (s'=r7T3P);

[r7T2done] (s=r7T2) -> rt2l2i*(1-rt2p2retry)*rt2p3poss*rt2p3ifull: (s'=r7T3) +
                     rt2l2i*(1-rt2p2retry)*(1-rt2p3poss): (s'=r8T1) +
                     rt2l2i*(1-rt2p2retry)*rt2p3poss*(1-rt2p3ifull): (s'=r7T3P) +
                     rt2l2i*rt2p2retry: (s'=r7T2);  

[r7T3done] (s=r7T3) -> rt2l3i: (s'=r8T1);

[r7T3Pdone] (s=r7T3P) -> rt2l3ip: (s'=r8T1);

[r8T1done] (s=r8T1) -> rt2l1i*(1-rt2p2req)*(1-rt2p3poss): (s'=r8END) +
                     rt2l1i*(1-rt2p2req)*rt2p3poss*rt2p3ifull: (s'=r8T3) +
                     rt2l1i*rt2p2req: (s'=r8T2) +
                     rt2l1i*(1-rt2p2req)*rt2p3poss*rt2p3ibasic: (s'=r8T3P);

[r8T2done] (s=r8T2) -> rt2l2i*(1-rt2p2retry)*rt2p3poss*rt2p3ifull: (s'=r8T3) +
                     rt2l2i*(1-rt2p2retry)*(1-rt2p3poss): (s'=r8END) +
                     rt2l2i*(1-rt2p2retry)*rt2p3poss*(1-rt2p3ifull): (s'=r8T3P) +
                     rt2l2i*rt2p2retry: (s'=r8T2);  

[r8T3done] (s=r8T3) -> rt2l3i: (s'=r8END);

[r8T3Pdone] (s=r8T3P) -> rt2l3ip: (s'=r8END);



endmodule

// Cost reward
rewards "c"
  [r1T1done] true: rt1c1i;
  [r1T2done] true: rt1c2i;
  [r2T1done] true: rt1c1i;
  [r2T2done] true: rt1c2i;
  [r3T1done] true: rt1c1i;
  [r3T2done] true: rt1c2i;
  [r4T1done] true: rt2c1i;
  [r4T2done] true: rt2c2i;
  [r4T3done] true: rt2c3i;
  [r4T3Pdone] true: rt2c3ip;
  [r5T1done] true: rt2c1i;
  [r5T2done] true: rt2c2i;
  [r5T3done] true: rt2c3i;
  [r5T3Pdone] true: rt2c3ip;
  [r6T1done] true: rt2c1i;
  [r6T2done] true: rt2c2i;
  [r6T3done] true: rt2c3i;
  [r6T3Pdone] true: rt2c3ip;
  [r7T1done] true: rt2c1i;
  [r7T2done] true: rt2c2i;
  [r7T3done] true: rt2c3i;
  [r7T3Pdone] true: rt2c3ip;
  [r8T1done] true: rt2c1i;
  [r8T2done] true: rt2c2i;
  [r8T3done] true: rt2c3i;
  [r8T3Pdone] true: rt2c3ip;

endrewards

// Utility reward
rewards "u"
  [r4T3done] true: rt2u3;
  [r4T3Pdone] true: rt2u3p;
  [r5T3done] true: rt2u3;
  [r5T3Pdone] true: rt2u3p;
  [r6T3done] true: rt2u3;
  [r6T3Pdone] true: rt2u3p;
  [r7T3done] true: rt2u3;
  [r7T3Pdone] true: rt2u3p;
  [r8T3done] true: rt2u3;
  [r8T3Pdone] true: rt2u3p;
endrewards

// Time reward
rewards "t"
   true : 1;
endrewards


// Constants to append

//const double t;
//const double travel_time;

// Rooms Type 1 -----------
// const double rt1l1i; const double rt1l2i; const double rt1l2ip;
// const double rt1p2norm; const double rt1p2retry;
// const double rt1c1i; const double rt1c2i;

// Rooms Type 2 -----------
// const double rt2l1i; const double rt2l2i; const double rt2l3i; const double rt2l3ip;
// const double rt2p2req; const double rt2p2retry; 
// const double rt2p3poss; const double rt2p3ibasic; const double rt2p3ifull; 
// const double rt2c1i; const double rt2c2i; const double rt2c3i; const double rt2c3ip;
// const double rt2u3; const double rt2u3p;
