// Rooms joint CTMC model template
// ------------------------------------------------------------

ctmc 


// Model parameters

//const double t; // Time threshold constant for time-related PCTL property
const mf =100; // Used for calculation of state values in rooms
const GO=0; // Initial state
const travel_time;

// Are we there yet?
label "end" = s=r8END;

// Rooms Type 1 -----------

// Begin Room Constants ---
const double r1l1i; const double r1l2i; const double r1l2ip;
const double r1p2norm; const double r1p2retry;
const double r1c1i; const double r1c2i;

const r1T1=1*mf+0; const r1T2=1*mf+1; const r1T2P=1*mf+2; const r1END=1*mf+3;
// End Room Constants ----

// Begin Room Constants ---
const double r2l1i; const double r2l2i; const double r2l2ip;
const double r2p2norm; const double r2p2retry;
const double r2c1i; const double r2c2i;

const r2T1=2*mf+0; const r2T2=2*mf+1; const r2T2P=2*mf+2; const r2END=2*mf+3;
// End Room Constants ----

// Begin Room Constants ---
const double r3l1i; const double r3l2i; const double r3l2ip;
const double r3p2norm; const double r3p2retry;
const double r3c1i; const double r3c2i;

const r3T1=3*mf+0; const r3T2=3*mf+1; const r3T2P=3*mf+2; const r3END=3*mf+3;
// End Room Constants ----


// Rooms Type 2 -----------

// Begin Room Constants ---

const double r4l1i; const double r4l2i; const double r4l3i; const double r4l3ip;
const double r4p2req; const double r4p2retry; 
const double r4p3poss; const double r4p3ibasic; const double r4p3ifull; 
const double r4c1i; const double r4c2i; const double r4c3i; const double r4c3ip;
const double r4u3; const double r4u3p;

const r4T1=4*mf+0; const r4T2=4*mf+1; const r4T3=4*mf+2; const r4T3P=4*mf+3; const r4END=4*mf+4;
// End Room Constants ----
// Begin Room Constants ---

const double r5l1i; const double r5l2i; const double r5l3i; const double r5l3ip;
const double r5p2req; const double r5p2retry; 
const double r5p3poss; const double r5p3ibasic; const double r5p3ifull; 
const double r5c1i; const double r5c2i; const double r5c3i; const double r5c3ip;
const double r5u3; const double r5u3p;

const r5T1=5*mf+0; const r5T2=5*mf+1; const r5T3=5*mf+2; const r5T3P=5*mf+3; const r5END=5*mf+4;
// End Room Constants ----
// Begin Room Constants ---

const double r6l1i; const double r6l2i; const double r6l3i; const double r6l3ip;
const double r6p2req; const double r6p2retry; 
const double r6p3poss; const double r6p3ibasic; const double r6p3ifull; 
const double r6c1i; const double r6c2i; const double r6c3i; const double r6c3ip;
const double r6u3; const double r6u3p;

const r6T1=6*mf+0; const r6T2=6*mf+1; const r6T3=6*mf+2; const r6T3P=6*mf+3; const r6END=6*mf+4;
// End Room Constants ----
// Begin Room Constants ---

const double r7l1i; const double r7l2i; const double r7l3i; const double r7l3ip;
const double r7p2req; const double r7p2retry; 
const double r7p3poss; const double r7p3ibasic; const double r7p3ifull; 
const double r7c1i; const double r7c2i; const double r7c3i; const double r7c3ip;
const double r7u3; const double r7u3p;

const r7T1=7*mf+0; const r7T2=7*mf+1; const r7T3=7*mf+2; const r7T3P=7*mf+3; const r7END=7*mf+4;
// End Room Constants ----
// Begin Room Constants ---

const double r8l1i; const double r8l2i; const double r8l3i; const double r8l3ip;
const double r8p2req; const double r8p2retry; 
const double r8p3poss; const double r8p3ibasic; const double r8p3ifull; 
const double r8c1i; const double r8c2i; const double r8c3i; const double r8c3ip;
const double r8u3; const double r8u3p;

const r8T1=8*mf+0; const r8T2=8*mf+1; const r8T3=8*mf+2; const r8T3P=8*mf+3; const r8END=8*mf+4;
// End Room Constants ----

module rooms
  s:[GO..r8END] init GO;

// Travel
 [travel] (s=GO) -> 1/travel_time: (s'=r1T1);

// Rooms Type 1

  [r1T1done] (s=r1T1) -> r1l1i*r1p2norm: (s'=r1T2) + r1l1i*(1-r1p2norm): (s'=r1T2P);
  [r1T2done] (s=r1T2) -> r1l2i*r1p2retry: (s'=r1T2) + r1l2i*(1-r1p2retry): (s'=r2T1);
  [r1T2done] (s=r1T2P) -> r1l2ip*r1p2retry: (s'=r1T2P) + r1l2ip*(1-r1p2retry): (s'=r2T1);
  [r2T1done] (s=r2T1) -> r2l1i*r2p2norm: (s'=r2T2) + r2l1i*(1-r2p2norm): (s'=r2T2P);
  [r2T2done] (s=r2T2) -> r2l2i*r2p2retry: (s'=r2T2) + r2l2i*(1-r2p2retry): (s'=r3T1);
  [r2T2done] (s=r2T2P) -> r2l2ip*r2p2retry: (s'=r2T2P) + r2l2ip*(1-r2p2retry): (s'=r3T1);
  [r3T1done] (s=r3T1) -> r3l1i*r3p2norm: (s'=r3T2) + r3l1i*(1-r3p2norm): (s'=r3T2P);
  [r3T2done] (s=r3T2) -> r3l2i*r3p2retry: (s'=r3T2) + r3l2i*(1-r3p2retry): (s'=r4T1);
  [r3T2done] (s=r3T2P) -> r3l2ip*r3p2retry: (s'=r3T2P) + r3l2ip*(1-r3p2retry): (s'=r4T1);

// Rooms Type 2

[r4T1done] (s=r4T1) -> r4l1i*(1-r4p2req)*(1-r4p3poss): (s'=r5T1) +
                     r4l1i*(1-r4p2req)*r4p3poss*r4p3ifull: (s'=r4T3) +
                     r4l1i*r4p2req: (s'=r4T2) +
                     r4l1i*(1-r4p2req)*r4p3poss*r4p3ibasic: (s'=r4T3P);

[r4T2done] (s=r4T2) -> r4l2i*(1-r4p2retry)*r4p3poss*r4p3ifull: (s'=r4T3) +
                     r4l2i*(1-r4p2retry)*(1-r4p3poss): (s'=r5T1) +
                     r4l2i*(1-r4p2retry)*r4p3poss*(1-r4p3ifull): (s'=r4T3P) +
                     r4l2i*r4p2retry: (s'=r4T2);  

[r4T3done] (s=r4T3) -> r4l3i: (s'=r5T1);

[r4T3Pdone] (s=r4T3P) -> r4l3ip: (s'=r5T1);
[r5T1done] (s=r5T1) -> r5l1i*(1-r5p2req)*(1-r5p3poss): (s'=r6T1) +
                     r5l1i*(1-r5p2req)*r5p3poss*r5p3ifull: (s'=r5T3) +
                     r5l1i*r5p2req: (s'=r5T2) +
                     r5l1i*(1-r5p2req)*r5p3poss*r5p3ibasic: (s'=r5T3P);

[r5T2done] (s=r5T2) -> r5l2i*(1-r5p2retry)*r5p3poss*r5p3ifull: (s'=r5T3) +
                     r5l2i*(1-r5p2retry)*(1-r5p3poss): (s'=r6T1) +
                     r5l2i*(1-r5p2retry)*r5p3poss*(1-r5p3ifull): (s'=r5T3P) +
                     r5l2i*r5p2retry: (s'=r5T2);  

[r5T3done] (s=r5T3) -> r5l3i: (s'=r6T1);

[r5T3Pdone] (s=r5T3P) -> r5l3ip: (s'=r6T1);
[r6T1done] (s=r6T1) -> r6l1i*(1-r6p2req)*(1-r6p3poss): (s'=r7T1) +
                     r6l1i*(1-r6p2req)*r6p3poss*r6p3ifull: (s'=r6T3) +
                     r6l1i*r6p2req: (s'=r6T2) +
                     r6l1i*(1-r6p2req)*r6p3poss*r6p3ibasic: (s'=r6T3P);

[r6T2done] (s=r6T2) -> r6l2i*(1-r6p2retry)*r6p3poss*r6p3ifull: (s'=r6T3) +
                     r6l2i*(1-r6p2retry)*(1-r6p3poss): (s'=r7T1) +
                     r6l2i*(1-r6p2retry)*r6p3poss*(1-r6p3ifull): (s'=r6T3P) +
                     r6l2i*r6p2retry: (s'=r6T2);  

[r6T3done] (s=r6T3) -> r6l3i: (s'=r7T1);

[r6T3Pdone] (s=r6T3P) -> r6l3ip: (s'=r7T1);
[r7T1done] (s=r7T1) -> r7l1i*(1-r7p2req)*(1-r7p3poss): (s'=r8T1) +
                     r7l1i*(1-r7p2req)*r7p3poss*r7p3ifull: (s'=r7T3) +
                     r7l1i*r7p2req: (s'=r7T2) +
                     r7l1i*(1-r7p2req)*r7p3poss*r7p3ibasic: (s'=r7T3P);

[r7T2done] (s=r7T2) -> r7l2i*(1-r7p2retry)*r7p3poss*r7p3ifull: (s'=r7T3) +
                     r7l2i*(1-r7p2retry)*(1-r7p3poss): (s'=r8T1) +
                     r7l2i*(1-r7p2retry)*r7p3poss*(1-r7p3ifull): (s'=r7T3P) +
                     r7l2i*r7p2retry: (s'=r7T2);  

[r7T3done] (s=r7T3) -> r7l3i: (s'=r8T1);

[r7T3Pdone] (s=r7T3P) -> r7l3ip: (s'=r8T1);

[r8T1done] (s=r8T1) -> r8l1i*(1-r8p2req)*(1-r8p3poss): (s'=r8END) +
                     r8l1i*(1-r8p2req)*r8p3poss*r8p3ifull: (s'=r8T3) +
                     r8l1i*r8p2req: (s'=r8T2) +
                     r8l1i*(1-r8p2req)*r8p3poss*r8p3ibasic: (s'=r8T3P);

[r8T2done] (s=r8T2) -> r8l2i*(1-r8p2retry)*r8p3poss*r8p3ifull: (s'=r8T3) +
                     r8l2i*(1-r8p2retry)*(1-r8p3poss): (s'=r8END) +
                     r8l2i*(1-r8p2retry)*r8p3poss*(1-r8p3ifull): (s'=r8T3P) +
                     r8l2i*r8p2retry: (s'=r8T2);  

[r8T3done] (s=r8T3) -> r8l3i: (s'=r8END);

[r8T3Pdone] (s=r8T3P) -> r8l3ip: (s'=r8END);



endmodule

// Cost reward
rewards "c"
  [r1T1done] true: r1c1i;
  [r1T2done] true: r1c2i;
  [r2T1done] true: r2c1i;
  [r2T2done] true: r2c2i;
  [r3T1done] true: r3c1i;
  [r3T2done] true: r3c2i;
  [r4T1done] true: r4c1i;
  [r4T2done] true: r4c2i;
  [r4T3done] true: r4c3i;
  [r4T3Pdone] true: r4c3ip;
  [r5T1done] true: r5c1i;
  [r5T2done] true: r5c2i;
  [r5T3done] true: r5c3i;
  [r5T3Pdone] true: r5c3ip;
  [r6T1done] true: r6c1i;
  [r6T2done] true: r6c2i;
  [r6T3done] true: r6c3i;
  [r6T3Pdone] true: r6c3ip;
  [r7T1done] true: r7c1i;
  [r7T2done] true: r7c2i;
  [r7T3done] true: r7c3i;
  [r7T3Pdone] true: r7c3ip;
  [r8T1done] true: r8c1i;
  [r8T2done] true: r8c2i;
  [r8T3done] true: r8c3i;
  [r8T3Pdone] true: r8c3ip;

endrewards

// Utility reward
rewards "u"
  [r4T3done] true: r4u3;
  [r4T3Pdone] true: r4u3p;
  [r5T3done] true: r5u3;
  [r5T3Pdone] true: r5u3p;
  [r6T3done] true: r6u3;
  [r6T3Pdone] true: r6u3p;
  [r7T3done] true: r7u3;
  [r7T3Pdone] true: r7u3p;
  [r8T3done] true: r8u3;
  [r8T3Pdone] true: r8u3p;
endrewards

// Time reward
rewards "t"
   true : 1;
endrewards
