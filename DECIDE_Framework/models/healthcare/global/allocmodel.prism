
// Healthcare case study global allocation model template
// ------------------------------------------------------
// This MDP model takes as input the number of robots, capabilities per robot, 
// and room number of every type, and can be used to
// solve the optimization problem via MDP policy synthesis
// Author: Javier Camara / 2019
//---------------------------------------------------------

mdp

 // NROBOTS: Number of robots
 // CAPABILITIES: Number of capabilities/robot (currently fixed)
 // Number of room types

const NROOMST1=4;
const NROOMST2=4;

const Max_cost=145;
const Max_time=145;

const double wRs = 1;
const double wRu = ( NROOMST1 +  NROOMST2 +  0)/1;

formula done =  (allocatedt1=0) &  (allocatedt2=0) &  true;

//-----------------------------------
// Rooms 
//-----------------------------------

module rooms
 time: [0..Max_time] init 0;
 cost: [0..Max_cost] init 0;
 end: bool init false;

  allocatedt1: [0..NROOMST1] init NROOMST1;
  allocatedt2: [0..NROOMST2] init NROOMST2;

  [r1c1t1] (allocatedt1>0) & (cost+costr1c1t1<=Max_cost) & (time+timer1c1t1<=Max_time)  -> (allocatedt1'=allocatedt1-1) & (cost'=cost+costr1c1t1) & (time'=time+timer1c1t1);
  [r1c2t1] (allocatedt1>0) & (cost+costr1c2t1<=Max_cost) & (time+timer1c2t1<=Max_time)  -> (allocatedt1'=allocatedt1-1) & (cost'=cost+costr1c2t1) & (time'=time+timer1c2t1);
  [r1c1t2] (allocatedt2>0) & (cost+costr1c1t2<=Max_cost) & (time+timer1c1t2<=Max_time)  -> (allocatedt2'=allocatedt2-1) & (cost'=cost+costr1c1t2) & (time'=time+timer1c1t2);
  [r1c2t2] (allocatedt2>0) & (cost+costr1c2t2<=Max_cost) & (time+timer1c2t2<=Max_time)  -> (allocatedt2'=allocatedt2-1) & (cost'=cost+costr1c2t2) & (time'=time+timer1c2t2);
  [] done -> (end'=true);
endmodule

//-----------------------------------
// Robots 
//-----------------------------------


module r1
 r1used: bool init false;
 [r1c1t1] true -> (r1used'=true);
 [r1c1t2] true -> (r1used'=true);
 [r1c2t1] true -> (r1used'=true);
 [r1c2t2] true -> (r1used'=true);
endmodule

//---------------------------------------
// Global utility
//---------------------------------------
rewards "utility"
  [r1c1t1] true: wRs;
  [r1c1t2] true: wRs;
  [r1c2t1] true: wRs;
  [r1c2t2] true: wRs;
  done & r1used : wRu;
endrewards
// Start of capability summary collection -------------- 
const timer1c1t1=18; 	const costr1c1t1=0; 	const timer1c1t2=26; 	const costr1c1t2=0; 	const delayr1c1=2; 
const timer1c2t1=18; 	const costr1c2t1=0; 	const timer1c2t2=28; 	const costr1c2t2=1; 	const delayr1c2=2; 
// End of capability summary collection -------------- 
